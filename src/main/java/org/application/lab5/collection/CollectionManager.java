package org.application.lab5.collection;

import org.application.lab5.dragons.*;
import org.application.lab5.exceptions.IdCollisionException;
import org.application.lab5.exceptions.IncorrectDataException;
import org.application.lab5.exceptions.JsonParseException;
import org.application.lab5.parsers.DateParser;
import org.application.lab5.parsers.JsonManager;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

import java.io.IOException;
import java.text.ParseException;
import java.util.Date;
import java.util.StringJoiner;

/**
 * Class for transferring collection from JSONObject to the DragonCollection and conversely
 */

public abstract class CollectionManager {

    /** Fills out DragonCollection, using data from generated by JsonManager JSONObject
     * @param json       JSONObject, data is used from it
     * @param collection this collection is filled out
     */
    public static void uploadCollection(JSONObject json, DragonCollection collection) {
        if (json.toString().equals("{}")) System.out.println("Создана новая коллекция");
        else {
            try {
                collection.setCreationDate(parseCreationDate(json));
                parseDragonList(json, collection);
                System.out.println("Коллекция загружена из файла");
            } catch (JsonParseException e) {
                System.out.println(e.getMessage()); //Logging
            }
        }
    }

    /**
     * Transfer dragon object from JSONObject, created by JsonManager to the DragonCollection
     *
     * @param objectDragon dragon, that adds in the collection
     * @param collection   in this collection adds dragon
     */
    public static void uploadDragon(Object objectDragon, DragonCollection collection) {
        try {
            JSONObject jsonDragon = (JSONObject) objectDragon;

            int id = parseDragonId(jsonDragon);
            String name = parseName(jsonDragon);
            Coordinates coordinates = parseCoords(jsonDragon);
            Date creationDate = parseCreationDate(jsonDragon);
            long weight = parseWeight(jsonDragon);
            Color color = parseColor(jsonDragon);
            DragonCharacter character = parseCharacter(jsonDragon);
            DragonHead head = parseHead(jsonDragon);

            Dragon dragon = new Dragon(id, name, coordinates, creationDate, weight, color, character, head);
            addDragonAge(jsonDragon, dragon);
            collection.add(dragon);

        } catch (ClassCastException e) {
            System.out.println("Объект Dragon утерян: Неправильный формат данных в файле"); //Logging
        } catch (IncorrectDataException | JsonParseException | IdCollisionException e) {
            System.out.println("Объект Dragon утерян: " + e.getMessage()); //Logging
        }
    }

    /**
     * Uploads list of dragons to the collection from JSONObject
     *
     * @throws JsonParseException if there are no list of dragons in the file
     */
    private static void parseDragonList(JSONObject json, DragonCollection collection) throws JsonParseException {
        try {
            JSONArray dragons = (JSONArray) json.get("dragons");
            for (Object dragon : dragons) {
                uploadDragon(dragon, collection);
            }
            System.out.println("Объектов загружено: " + collection.getItems().size());
            System.out.println("Объектов утеряно: " + (dragons.size() - collection.getItems().size()));
        } catch (ClassCastException | NullPointerException e) {
            throw new JsonParseException("Утеряны данные о коллекции: Список объектов Dragon");
        }
    }

    /**
     * Parses id of dragon from JSONObject
     *
     * @return id
     * @throws JsonParseException if dragon id is incorrect in the file
     */
    private static int parseDragonId(JSONObject dragon) throws JsonParseException {
        try {
            return ((Long) dragon.get("id")).intValue();
        } catch (ClassCastException | NullPointerException e) {
            throw new JsonParseException("Некорректный Id");
        }
    }

    /**
     * Parses name for dragon from JSONObject
     *
     * @return name
     * @throws JsonParseException if name is not String
     */
    private static String parseName(JSONObject dragon) throws JsonParseException {
        try {
            return (String) dragon.get("name");
        } catch (ClassCastException | NullPointerException e) {
            throw new JsonParseException("Некорректное имя");
        }
    }

    /**
     * Parses coordinates for dragon from JSONObject
     *
     * @return coordinates
     * @throws JsonParseException if coordinates data is incorrect
     */
    private static Coordinates parseCoords(JSONObject dragon) throws JsonParseException {
        try {
            double x = (double) ((JSONObject) dragon.get("coordinates")).get("x");
            float y = ((Double) ((JSONObject) dragon.get("coordinates")).get("y")).floatValue();
            return new Coordinates(x, y);
        } catch (ClassCastException | IncorrectDataException | NullPointerException e) {
            throw new JsonParseException("Некорректные координаты");
        }
    }

    /**
     * Parses weight for dragon from JSONObject
     *
     * @return weight
     * @throws JsonParseException if weight is incorrect
     */
    private static long parseWeight(JSONObject dragon) throws JsonParseException {
        try {
            return (long) dragon.get("weight");
        } catch (ClassCastException | NullPointerException e) {
            throw new JsonParseException("Некорректный вес");
        }
    }

    /**
     * Parses color for dragon from JSONObject
     *
     * @return color
     * @throws JsonParseException if color is incorrect
     */
    private static Color parseColor(JSONObject dragon) throws JsonParseException {
        try {
            return Color.valueOf((String) dragon.get("color"));
        } catch (ClassCastException | IllegalArgumentException | NullPointerException e) {
            throw new JsonParseException("Некорректный цвет");
        }
    }

    /**
     * Parser dragon character from JSONObject
     *
     * @return character
     * @throws JsonParseException if character is incorrect
     */
    private static DragonCharacter parseCharacter(JSONObject dragon) throws JsonParseException {
        try {
            return DragonCharacter.valueOf((String) dragon.get("character"));
        } catch (ClassCastException | IllegalArgumentException | NullPointerException e) {
            throw new JsonParseException("Некорректный характер");
        }
    }

    /**
     * Parses dragon head from JSONObject
     *
     * @return head
     * @throws JsonParseException if count of eyes is incorrect
     */
    private static DragonHead parseHead(JSONObject dragon) throws JsonParseException {
        try {
            float eyesCount = ((Double) ((JSONObject) dragon.get("head")).get("eyesCount")).floatValue();
            return new DragonHead(eyesCount);
        } catch (ClassCastException | IncorrectDataException | NullPointerException e) {
            throw new JsonParseException("Некорректное количество глаз");
        }
    }

    /**
     * Sets age to the dragon from JSONObject
     * If age is incorrect, sets null
     *
     * @param jsonDragon JSONObject for parsing
     * @param dragon     object, that takes age
     */
    private static void addDragonAge(JSONObject jsonDragon, Dragon dragon) {
        try {
            int age = ((Long) jsonDragon.get("age")).intValue();
            dragon.setAge(age);
        } catch (NullPointerException | IncorrectDataException ignored) {
        } // Поле age может быть null, поэтому при ошибке таким его и оставляем
    }

    /**
     * Parsers date of creation for dragon or for the collection from JSONObject
     *
     * @return creationDate
     * @throws JsonParseException if creationDate is incorrect
     */
    private static Date parseCreationDate(JSONObject json) throws JsonParseException {
        try {
            String creationDateString = (String) json.get("creationDate");
            return DateParser.stringToDate(creationDateString);
        } catch (NullPointerException | ParseException | ClassCastException e) {
            throw new JsonParseException("Утеряна дата создания");
        }
    }

    /**
     * Serializes DragonCollection to the JSONObject for save it in JSON file
     *
     * @param manager    collection saves by this JsonManager
     * @param collection this collection saves
     */
    public static void saveCollection(JsonManager manager, DragonCollection collection) {
        JSONObject json = new JSONObject();
        json.put("creationDate", DateParser.dateToString(collection.getCreationDate()));
        JSONArray dragons = new JSONArray();
        for (Dragon dragon : collection.getItems()) {
            JSONObject jsonDragon = serializeDragon(dragon);
            dragons.add(jsonDragon);
        }
        json.put("dragons", dragons);
        manager.writeJSON(json);
    }

    /**
     * Serializes one dragon to the JSONObject
     *
     * @return jsonDragon
     */
    private static JSONObject serializeDragon(Dragon dragon) {
        JSONObject jsonDragon = new JSONObject();
        JSONObject head = new JSONObject();
        head.put("eyesCount", dragon.getDragonHead().getEyesCount());
        jsonDragon.put("head", head);

        jsonDragon.put("character", dragon.getDragonCharacter().name());
        jsonDragon.put("color", dragon.getColor().name());
        jsonDragon.put("weight", dragon.getWeight());
        try {
            jsonDragon.put("age", dragon.getAge());
        } catch (NullPointerException e) {
            jsonDragon.put("age", null);
        }
        jsonDragon.put("creationDate", DateParser.dateToString(dragon.getCreationDate()));
        JSONObject coordinates = new JSONObject();
        coordinates.put("x", dragon.getCoordinates().getX());
        coordinates.put("y", dragon.getCoordinates().getY());
        jsonDragon.put("coordinates", coordinates);
        jsonDragon.put("name", dragon.getName());
        jsonDragon.put("id", dragon.getId());
        return jsonDragon;
    }
}