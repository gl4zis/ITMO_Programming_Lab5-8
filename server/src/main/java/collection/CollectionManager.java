package collection;

import dragons.*;
import exceptions.IdCollisionException;
import exceptions.IncorrectDataException;
import exceptions.JsonParseException;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import parsers.DateParser;
import parsers.JsonManager;

import java.text.ParseException;
import java.util.Date;

/**
 * Class for transferring collection from JSONObject to the DragonCollection
 */
public abstract class CollectionManager {
    private static final Logger LOGGER = LogManager.getLogger(CollectionManager.class);

    /**
     * Fills out DragonCollection, using data from generated by JsonManager JSONObject
     *
     * @param json       JSONObject, data is used from it
     * @param collection this collection is filled out
     */
    public static void uploadCollection(JSONObject json, DragonCollection collection) {
        if (json.toString().equals("{}")) LOGGER.info("New collection was created");
        else {
            try {
                collection.setCreationDate(parseCreationDate(json));
            } catch (JsonParseException e) {
                LOGGER.debug(e.getMessage() + " for collection. Set new Date");
                collection.setCreationDate(new Date());
            }
            try {
                parseDragonList(json, collection);
                LOGGER.debug("Collection was uploaded from file");
            } catch (JsonParseException e) {
                LOGGER.debug(e.getMessage());
            }
        }
    }

    /**
     * Transfer dragon object from JSONObject, created by JsonManager to the DragonCollection
     *
     * @param objectDragon dragon, that adds in the collection
     * @param collection   in this collection adds dragon
     */
    private static void uploadDragon(Object objectDragon, DragonCollection collection) {
        try {
            JSONObject jsonDragon = (JSONObject) objectDragon;

            int id = parseDragonId(jsonDragon);
            String name = parseName(jsonDragon);
            Coordinates coordinates = parseCoords(jsonDragon);
            Date creationDate = parseCreationDate(jsonDragon);
            long weight = parseWeight(jsonDragon);
            Color color = parseColor(jsonDragon);
            DragonCharacter character = parseCharacter(jsonDragon);
            DragonHead head = parseHead(jsonDragon);

            Dragon dragon = new Dragon(id, name, coordinates, creationDate, weight, color, character, head);
            addDragonAge(jsonDragon, dragon);
            collection.add(dragon);

        } catch (ClassCastException e) {
            LOGGER.debug("Lost dragon: Incorrect data format in the file");
        } catch (IncorrectDataException | JsonParseException | IdCollisionException e) {
            LOGGER.debug("Lost dragon: " + e.getMessage());
        }
    }

    /**
     * Uploads list of dragons to the collection from JSONObject
     *
     * @throws JsonParseException if there are no list of dragons in the file
     */
    private static void parseDragonList(JSONObject json, DragonCollection collection) throws JsonParseException {
        try {
            JSONArray dragons = (JSONArray) json.get("dragons");
            for (Object dragon : dragons) {
                uploadDragon(dragon, collection);
            }
            LOGGER.info("Uploaded " + collection.getItems().size() + " dragons");
            LOGGER.info("Lost " + (dragons.size() - collection.getItems().size()) + " dragons");
        } catch (ClassCastException | NullPointerException e) {
            throw new JsonParseException("Lost collection data: List of dragons");
        }
    }

    /**
     * Parses id of dragon from JSONObject
     *
     * @return id
     * @throws JsonParseException if dragon id is incorrect in the file
     */
    private static int parseDragonId(JSONObject dragon) throws JsonParseException {
        try {
            return ((Long) dragon.get("id")).intValue();
        } catch (ClassCastException | NullPointerException e) {
            throw new JsonParseException("Incorrect id");
        }
    }

    /**
     * Parses name for dragon from JSONObject
     *
     * @return name
     * @throws JsonParseException if name is not String
     */
    private static String parseName(JSONObject dragon) throws JsonParseException {
        try {
            return (String) dragon.get("name");
        } catch (ClassCastException | NullPointerException e) {
            throw new JsonParseException("Incorrect name");
        }
    }

    /**
     * Parses coordinates for dragon from JSONObject
     *
     * @return coordinates
     * @throws JsonParseException if coordinates data is incorrect
     */
    private static Coordinates parseCoords(JSONObject dragon) throws JsonParseException {
        try {
            double x = (double) ((JSONObject) dragon.get("coordinates")).get("x");
            float y = ((Double) ((JSONObject) dragon.get("coordinates")).get("y")).floatValue();
            return new Coordinates(x, y);
        } catch (ClassCastException | IncorrectDataException | NullPointerException e) {
            throw new JsonParseException("Incorrect coordinates");
        }
    }

    /**
     * Parses weight for dragon from JSONObject
     *
     * @return weight
     * @throws JsonParseException if weight is incorrect
     */
    private static long parseWeight(JSONObject dragon) throws JsonParseException {
        try {
            return (long) dragon.get("weight");
        } catch (ClassCastException | NullPointerException e) {
            throw new JsonParseException("Incorrect weight");
        }
    }

    /**
     * Parses color for dragon from JSONObject
     *
     * @return color
     * @throws JsonParseException if color is incorrect
     */
    private static Color parseColor(JSONObject dragon) throws JsonParseException {
        try {
            return Color.valueOf((String) dragon.get("color"));
        } catch (ClassCastException | IllegalArgumentException | NullPointerException e) {
            throw new JsonParseException("Incorrect color");
        }
    }

    /**
     * Parser dragon character from JSONObject
     *
     * @return character
     * @throws JsonParseException if character is incorrect
     */
    private static DragonCharacter parseCharacter(JSONObject dragon) throws JsonParseException {
        try {
            return DragonCharacter.valueOf((String) dragon.get("character"));
        } catch (ClassCastException | IllegalArgumentException | NullPointerException e) {
            throw new JsonParseException("Incorrect dragon character");
        }
    }

    /**
     * Parses dragon head from JSONObject
     *
     * @return head
     * @throws JsonParseException if count of eyes is incorrect
     */
    private static DragonHead parseHead(JSONObject dragon) throws JsonParseException {
        try {
            float eyesCount = ((Double) ((JSONObject) dragon.get("head")).get("eyesCount")).floatValue();
            return new DragonHead(eyesCount);
        } catch (ClassCastException | IncorrectDataException | NullPointerException e) {
            throw new JsonParseException("Incorrect count of dragon eyes");
        }
    }

    /**
     * Sets age to the dragon from JSONObject
     * If age is incorrect, sets null
     *
     * @param jsonDragon JSONObject for parsing
     * @param dragon     object, that takes age
     */
    private static void addDragonAge(JSONObject jsonDragon, Dragon dragon) {
        try {
            int age = ((Long) jsonDragon.get("age")).intValue();
            dragon.setAge(age);
        } catch (NullPointerException | IncorrectDataException ignored) {
        } // Age can be null, so ignore exception if age is null
    }

    /**
     * Parsers date of creation for dragon or for the collection from JSONObject
     *
     * @return creationDate
     * @throws JsonParseException if creationDate is incorrect
     */
    private static Date parseCreationDate(JSONObject json) throws JsonParseException {
        try {
            String creationDateString = (String) json.get("creationDate");
            return DateParser.stringToDate(creationDateString);
        } catch (NullPointerException | ParseException | ClassCastException e) {
            throw new JsonParseException("Incorrect date of creation");
        }
    }

    /**
     * Saves collection to the JSON file
     *
     * @param json       manager, what parses data to the file
     * @param collection what will be saved
     */
    public static void saveCollection(JsonManager json, DragonCollection collection) {
        json.writeJSON(collection.toJson());
    }
}